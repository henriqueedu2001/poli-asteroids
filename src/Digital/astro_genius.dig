<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>astro_genius</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clock,reset,iniciar,chaves:6</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>module astro_genius (
        input clock,
        input reset,
        input iniciar,
        input [5:0] chaves,

        output pronto,

        /* sinais de depuracao */
        output [4:0] db_estado_jogo_principal,
        output [4:0] db_estado_coordena_asteroides_tiros,
        output [4:0] db_estado_compara_tiros_e_asteroide,
        output [4:0] db_estado_move_tiros,
        output [4:0] db_estado_compara_asteroides_com_nave_e_tiros,
        output [4:0] db_estado_move_asteroides,
        output [3:0] db_estado_registra_tiro,
        output [3:0] db_vidas,
        output [3:0] db_asteroide_x,
        output [3:0] db_asteroide_y,
        output [3:0] db_tiro_x,
        output [3:0] db_tiro_y
);

//wires da conexão da UC principal com outros modulos
wire wire_vidas;
wire wire_fim_movimentacao_asteroides_e_tiros;
wire wire_inicia_registra_tiros;
wire wire_inicia_movimentacao_asteroides_e_tiros;
wire wire_reset_maquinas;
wire wire_reset_contador_asteroides_uc_principal;
wire wire_reset_contador_tiro_uc_principal; //sintaxe: o final indica de onde está saindo o fio
wire wire_enable_decrementador; 
wire wire_reset_contador_vidas;

wire wire_ocorreu_tiro;
wire wire_ocorreu_jogada;
wire wire_reset_reg_jogada;
wire wire_enable_reg_jogada;

wire wire_destruido_aste;

wire [3:0] wire_aste_coor_x;
wire [3:0] wire_aste_coor_y;

wire [1:0] wire_opcode_mux_out;

assign db_asteroide_x = wire_aste_renderizado ? wire_aste_coor_x : 4&apos;b0000;
assign db_asteroide_y = wire_aste_renderizado ? wire_aste_coor_y : 4&apos;b0000;

assign db_tiro_x = wire_tiro_renderizado ? wire_tiro_coor_x : 4&apos;b0000;
assign db_tiro_y = wire_tiro_renderizado ? wire_tiro_coor_y : 4&apos;b0000;

uc_jogo_principal uc_jogo_principal(
    /* inputs */
    .clock(clock),
    .iniciar(iniciar),
    .reset(reset),
    .vidas(~wire_vidas), //rco do decrementador
    .fim_movimentacao_asteroides_e_tiros(wire_fim_movimentacao_asteroides_e_tiros), 
    .fim_registra_tiros(wire_tiro_registrado),
    .ocorreu_tiro(wire_ocorreu_tiro), 
    .ocorreu_jogada(wire_ocorreu_jogada), //saida do edge detector
    /* outputs */
    .enable_reg_jogada(wire_enable_reg_jogada),
    .reset_reg_jogada(wire_reset_reg_jogada), 
    .inicia_registra_tiros(wire_inicia_registra_tiros),
    .inicia_movimentacao_asteroides_e_tiros(wire_inicia_movimentacao_asteroides_e_tiros), 
    .reset_contador_asteroides(wire_reset_contador_asteroides_uc_principal),
    .reset_contador_tiro(wire_reset_contador_tiro_uc_principal),
    .reset_contador_vidas(wire_reset_contador_vidas),
    .reset_maquinas(wire_reset_maquinas),
    .pronto(pronto),
    .db_estado_jogo_principal(db_estado_jogo_principal)
);
// wires genericos 
wire wire_rco_contador_tiro;
wire wire_rco_contador_asteroides;




// wires da conexão da uc_coordena_asteroides_tiros com outros modulos
// INPUT
wire wire_fim_move_tiros;
wire wire_fim_move_asteroides;
wire wire_fim_comparacao_asteroides_com_a_nave_e_tiros;
wire wire_fim_comparacao_tiros_e_asteroides;
wire wire_rco_contador_tiro_quantas_incrementacoes;
wire  wire_rco_contador_asteroides_quantas_incrementacoes;

// OUTPUT
wire wire_movimenta_tiro;
wire wire_sinal_movimenta_asteroides;
wire wire_sinal_compara_tiros_e_asteroides_uc_coordena_asteroides_tiros;
wire wire_sinal_compara_asteroides_com_a_nave_e_tiro;

// compartilhados
wire wire_conta_contador_tiro_uc_coordena_asteroides_tiros;
wire wire_reset_contador_tiro_uc_coordena_asteroides_tiros;
wire wire_reset_contador_asteroides_uc_coordena_asteroides_tiros;
wire wire_conta_contador_asteroides_uc_coordena_asteroides_tiros;

wire wire_sinal_compara_tiros_e_asteroide_uc_compara_asteroides_com_nave_e_tiros;

uc_coordena_asteroides_tiros uc_coordena_asteroides_tiros(
    /* inputs */
    .clock(clock),
    .reset(wire_reset_maquinas),
    .move_tiro_e_asteroides(wire_inicia_movimentacao_asteroides_e_tiros),
    .rco_contador_tiro(wire_rco_contador_tiro_quantas_incrementacoes),
    .rco_contador_asteroides(wire_rco_contador_asteroides_quantas_incrementacoes),
    .fim_move_tiros(wire_fim_move_tiros),
    .fim_move_asteroides(wire_fim_move_asteroides),
    .fim_comparacao_asteroides_com_a_nave_e_tiros(wire_fim_comparacao_asteroides_com_a_nave_e_tiros),
    .fim_comparacao_tiros_e_asteroides(wire_fim_comparacao_tiros_e_asteroides),
    /* outputs */
    .movimenta_tiro(wire_movimenta_tiro),
    .sinal_movimenta_asteroides(wire_sinal_movimenta_asteroides),
    .sinal_compara_tiros_e_asteroides(wire_sinal_compara_tiros_e_asteroides_uc_coordena_asteroides_tiros ),
    .sinal_compara_asteroides_com_a_nave_e_tiro(wire_sinal_compara_asteroides_com_a_nave_e_tiro),
    .conta_contador_tiro(wire_conta_contador_tiro_uc_coordena_asteroides_tiros),
    .reset_contador_tiro(wire_reset_contador_tiro_uc_coordena_asteroides_tiros),
    .reset_contador_asteroides(wire_reset_contador_asteroides_uc_coordena_asteroides_tiros),
    .conta_contador_asteroides(wire_conta_contador_asteroides_uc_coordena_asteroides_tiros),
    .fim_move_tiro_e_asteroides(wire_fim_movimentacao_asteroides_e_tiros),
    .db_estado_coordena_asteroides_tiros(db_estado_coordena_asteroides_tiros)
);




// wires da conexão da uc_compara_tiros_e_asteroides com outros modulos
// INPUT
wire wire_posicao_tiro_igual_asteroide;

// principal
wire wire_tiro_renderizado;
wire wire_aste_renderizado;

// OUTPUT
wire wire_reset_contador_asteroides_uc_compara_tiros_e_asteroides;
wire wire_reset_contador_tiros_uc_compara_tiros_e_asteroides;
wire wire_enable_load_tiro_uc_compara_tiros_e_asteroides;
wire wire_enable_load_asteroide_uc_compara_tiros_e_asteroides;
wire wire_new_loaded_tiro_uc_compara_tiros_e_asteroides;
wire wire_new_loaded_asteroide_uc_compara_tiros_e_asteroides;
wire wire_new_destruido_asteroide_uc_compara_tiros_e_asteroides;

wire wire_conta_contador_asteroides_uc_compara_tiros_e_asteroides;
wire wire_conta_contador_tiros_uc_compara_tiros_e_asteroides;


uc_compara_tiros_e_asteroides uc_compara_tiros_e_asteroides (
    /* inputs */
    .clock(clock),
    .reset(wire_reset_maquinas),
    .compara_tiros_e_asteroides(wire_sinal_compara_tiros_e_asteroides_uc_coordena_asteroides_tiros |
                                wire_sinal_compara_tiros_e_asteroide_uc_compara_asteroides_com_nave_e_tiros
                                ),
    .posicao_tiro_igual_asteroide(wire_posicao_tiro_igual_asteroide),
    .rco_contador_asteroides(wire_rco_contador_asteroides),
    .rco_contador_tiros(wire_rco_contador_tiro),
    .tiro_renderizado(wire_tiro_renderizado),
    .aste_renderizado(wire_aste_renderizado),
    /* outputs */
    .reset_contador_asteroides(wire_reset_contador_asteroides_uc_compara_tiros_e_asteroides),
    .reset_contador_tiros(wire_reset_contador_tiros_uc_compara_tiros_e_asteroides),
    .enable_load_tiro(wire_enable_load_tiro_uc_compara_tiros_e_asteroides),
    .enable_load_asteroide(wire_enable_load_asteroide_uc_compara_tiros_e_asteroides),
    .loaded_tiro(wire_new_loaded_tiro_uc_compara_tiros_e_asteroides),
    .loaded_asteroide(wire_new_loaded_asteroide_uc_compara_tiros_e_asteroides),
    .asteroide_destruido(wire_new_destruido_asteroide_uc_compara_tiros_e_asteroides),
    .conta_contador_asteroides(wire_conta_contador_asteroides_uc_compara_tiros_e_asteroides),
    .conta_contador_tiros(wire_conta_contador_tiros_uc_compara_tiros_e_asteroides),

    .s_fim_comparacao(wire_fim_comparacao_tiros_e_asteroides),
    .db_estado_compara_tiros_e_asteroide(db_estado_compara_tiros_e_asteroide)
);



// wires da conexão da uc_move_tiros com outros modulos
// INPUT
wire [1:0] wire_opcode_tiro;
wire wire_x_borda_max_tiro;
wire wire_y_borda_max_tiro;
wire wire_x_borda_min_tiro;
wire wire_y_borda_min_tiro;

// OUTPUT
wire [1:0] wire_select_mux_pos_tiro_uc_move_tiros;
wire wire_select_mux_coor_tiro_uc_move_tiros;
wire wire_select_soma_sub_uc_move_tiros;
wire wire_reset_contador_tiro_uc_move_tiros;
wire wire_conta_contador_tiro_uc_move_tiros;
wire wire_enable_mem_tiro_uc_move_tiros;
wire wire_enable_load_tiro_uc_move_tiros;
wire wire_new_loaded_tiro_uc_move_tiros;

uc_move_tiros uc_move_tiros (
    /* inputs */
    .clock(clock),
    .movimenta_tiro(wire_movimenta_tiro),
    .reset(wire_reset_maquinas),
    .opcode_tiro(wire_opcode_tiro),
    .loaded_tiro(wire_tiro_renderizado),
    .rco_contador_tiro(wire_rco_contador_tiro),
    .x_borda_max_tiro(wire_x_borda_max_tiro),
    .y_borda_max_tiro(wire_y_borda_max_tiro),
    .x_borda_min_tiro(wire_x_borda_min_tiro),
    .y_borda_min_tiro(wire_y_borda_min_tiro), 
    /* outputs */
    .select_mux_pos_tiro (wire_select_mux_pos_tiro_uc_move_tiros),   
    .select_mux_coor_tiro(wire_select_mux_coor_tiro_uc_move_tiros),   
    .select_soma_sub(wire_select_soma_sub_uc_move_tiros),  
    .reset_contador_tiro(wire_reset_contador_tiro_uc_move_tiros),
    .conta_contador_tiro(wire_conta_contador_tiro_uc_move_tiros), 
    .enable_mem_tiro(wire_enable_mem_tiro_uc_move_tiros), 
    .enable_load_tiro(wire_enable_load_tiro_uc_move_tiros),
    .new_loaded(wire_new_loaded_tiro_uc_move_tiros),                
    .movimentacao_concluida_tiro(wire_fim_move_tiros), 
    .db_estado_move_tiros(db_estado_move_tiros)
);

// INPUT
wire wire_posicao_asteroide_igual_nave;

// OUTPUT
wire wire_new_loaded_asteroide_uc_compara_asteroides_com_nave_e_tiros;
wire wire_new_destruido_asteroide_uc_compara_asteroides_com_nave_e_tiros;
wire wire_enable_load_asteroides_uc_compara_asteroides_com_nave_e_tiros;
wire wire_reset_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros;

wire wire_conta_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros;


uc_compara_asteroides_com_nave_e_tiros uc_compara_asteroides_com_nave_e_tiros (
    /* inputs */
    .clock(clock),
    .reset(wire_reset_maquinas),
    .iniciar_comparacao_tiros_nave_asteroides(wire_sinal_compara_asteroides_com_a_nave_e_tiro),
    .posicao_asteroide_igual_nave(wire_posicao_asteroide_igual_nave),
    .ha_vidas(~wire_vidas),
    .rco_contador_asteroides(wire_rco_contador_asteroides),
    .fim_compara_tiros_e_asteroides(wire_fim_comparacao_tiros_e_asteroides),
    .loaded_asteroide(wire_aste_renderizado),
    .destruido_asteroide(wire_destruido_aste),
    /* outputs */
    .enable_decrementador(wire_enable_decrementador),
    .new_loaded_asteroide(wire_new_loaded_asteroide_uc_compara_asteroides_com_nave_e_tiros),
    .new_destruido_asteroide(wire_new_destruido_asteroide_uc_compara_asteroides_com_nave_e_tiros),
    .fim_compara_asteroides_com_tiros_e_nave(wire_fim_comparacao_asteroides_com_a_nave_e_tiros),
    .enable_load_asteroide(wire_enable_load_asteroides_uc_compara_asteroides_com_nave_e_tiros),
    .conta_contador_asteroides(wire_conta_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros), 
    .sinal_compara_tiros_e_asteroide(wire_sinal_compara_tiros_e_asteroide_uc_compara_asteroides_com_nave_e_tiros),
    .reset_contador_asteroides(wire_reset_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros),
    .db_estado_compara_asteroides_com_nave_e_tiros(db_estado_compara_asteroides_com_nave_e_tiros)
);

// INPUT

wire [1:0] wire_opcode_aste;

// OUTPUT
wire [1:0] wire_select_mux_pos_aste_uc_move_asteroides;
wire wire_select_mux_coor_aste_uc_move_asteroides;

wire wire_select_soma_sub_uc_move_asteroides;

wire wire_reset_contador_aste_uc_move_asteroides;
wire wire_conta_contador_aste_uc_move_asteroides;

wire wire_enable_mem_aste_uc_move_asteroides;
uc_move_asteroides uc_move_asteroides(
    /* inputs */
    .clock(clock),
    .movimenta_aste(wire_sinal_movimenta_asteroides),
    .reset(wire_reset_maquinas),
    .opcode_aste(wire_opcode_aste),
    .loaded_aste(wire_aste_renderizado),
    .rco_contador_aste(wire_rco_contador_asteroides),
     /* outputs */    
    .select_mux_pos_aste(wire_select_mux_pos_aste_uc_move_asteroides),   
    .select_mux_coor_aste(wire_select_mux_coor_aste_uc_move_asteroides),  
    .select_soma_sub(wire_select_soma_sub_uc_move_asteroides),  
    .reset_contador_aste(wire_reset_contador_aste_uc_move_asteroides),
    .conta_contador_aste(wire_conta_contador_aste_uc_move_asteroides), 
    .enable_mem_aste(wire_enable_mem_aste_uc_move_asteroides), 
    .movimentacao_concluida_aste(wire_fim_move_asteroides), 
    .db_estado_move_aste(db_estado_move_asteroides)

);

//Outputs
wire wire_enable_mem_tiro_uc_registra_tiro;
wire wire_enable_load_tiro_uc_registra_tiro;
wire wire_new_loaded_tiro_uc_registra_tiro;
wire wire_reset_contador_tiro_uc_registra_tiro;
wire wire_conta_contador_tiro_uc_registra_tiro;
wire [1:0] wire_select_mux_pos_tiro_uc_registra_tiro;

wire wire_tiro_registrado;

uc_registra_tiro uc_registra_tiro(
    /* inputs */
    .clock(clock),
    .registra_tiro(wire_inicia_registra_tiros),
    .reset(wire_reset_maquinas),
    .loaded_tiro(wire_tiro_renderizado),
    .rco_contador_tiro(wire_rco_contador_tiro),
    /* outputs */
    .enable_mem_tiro(wire_enable_mem_tiro_uc_registra_tiro), 
    .enable_load_tiro(wire_enable_load_tiro_uc_registra_tiro), 
    .new_load(wire_new_loaded_tiro_uc_registra_tiro),
    .clear_contador_tiro(wire_reset_contador_tiro_uc_registra_tiro), 
    .conta_contador_tiro(wire_conta_contador_tiro_uc_registra_tiro), 
    .select_mux_pos(wire_select_mux_pos_tiro_uc_registra_tiro), 
    .tiro_registrado(wire_tiro_registrado), 
    .db_estado_registra_tiro(db_estado_registra_tiro)

);


asteroide asteroide(
    /* inputs */
    .clock(clock),
    .conta_contador_aste(wire_conta_contador_asteroides_uc_compara_tiros_e_asteroides|
                         wire_conta_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros |
                         wire_conta_contador_aste_uc_move_asteroides),
    .reset_contador_aste(wire_reset_contador_asteroides_uc_principal | 
                         wire_reset_contador_asteroides_uc_compara_tiros_e_asteroides |
                         wire_reset_contador_asteroides_uc_compara_asteroides_com_nave_e_tiros |
                         wire_reset_contador_aste_uc_move_asteroides),
    .select_mux_pos_aste(wire_select_mux_pos_aste_uc_move_asteroides),
    .select_mux_coor_aste(wire_select_mux_coor_aste_uc_move_asteroides),
    .select_soma_sub_aste(wire_select_soma_sub_uc_move_asteroides),
    .enable_reg_nave(),
    .reset_reg_nave(),
    .enable_mem_aste(wire_enable_mem_aste_uc_move_asteroides),
    .enable_load_aste(wire_enable_load_asteroide_uc_compara_tiros_e_asteroides |
                      wire_enable_load_asteroides_uc_compara_asteroides_com_nave_e_tiros),
    // .new_load_aste(wire_new_loaded_asteroide_uc_compara_tiros_e_asteroides | 
    //                wire_new_loaded_asteroide_uc_compara_asteroides_com_nave_e_tiros),
    .new_load_aste(1&apos;b0),
    .new_destruido_aste(wire_new_destruido_asteroide_uc_compara_tiros_e_asteroides |
                        wire_new_destruido_asteroide_uc_compara_asteroides_com_nave_e_tiros),
    /* outputs */
    .colisao_aste_com_nave(wire_posicao_asteroide_igual_nave),
    .rco_contador_aste(wire_rco_contador_asteroides),
    .opcode_aste(wire_opcode_aste),
    .destruido_aste(wire_destruido_aste),
    .loaded_aste(wire_aste_renderizado),
    .aste_coor_x(wire_aste_coor_x),
    .aste_coor_y(wire_aste_coor_y),
    .db_contador_aste(),
    .db_wire_saida_som_sub_aste()
);

wire [3:0] wire_tiro_coor_x;
wire [3:0] wire_tiro_coor_y;


tiro tiro (
    /* inputs */
    .clock(clock),
    .conta_contador_tiro(wire_conta_contador_tiros_uc_compara_tiros_e_asteroides |
                         wire_conta_contador_tiro_uc_move_tiros |
                         wire_conta_contador_tiro_uc_registra_tiro),
    .reset_contador_tiro(wire_reset_contador_tiro_uc_principal |
                         wire_reset_contador_tiros_uc_compara_tiros_e_asteroides |
                         wire_reset_contador_tiro_uc_move_tiros |
                         wire_reset_contador_tiro_uc_registra_tiro),
    .select_mux_pos_tiro(wire_select_mux_pos_tiro_uc_move_tiros |
                         wire_select_mux_pos_tiro_uc_registra_tiro),
                         
    .select_mux_coor_tiro(wire_select_mux_coor_tiro_uc_move_tiros),
    .select_soma_sub_tiro(wire_select_soma_sub_uc_move_tiros),
    .enable_reg_nave(),
    .reset_reg_nave(),
    .enable_mem_tiro(wire_enable_mem_tiro_uc_move_tiros |
                    wire_enable_mem_tiro_uc_registra_tiro),
    .enable_load_tiro(wire_enable_load_tiro_uc_compara_tiros_e_asteroides |
                      wire_enable_load_tiro_uc_move_tiros |
                      wire_enable_load_tiro_uc_registra_tiro),
    .aste_coor_x(wire_aste_coor_x),
    .aste_coor_y(wire_aste_coor_y),
    // .new_load_tiro(wire_new_loaded_tiro_uc_compara_tiros_e_asteroides |
    //                wire_new_loaded_tiro_uc_move_tiros |
    //                wire_new_loaded_tiro_uc_registra_tiro),
    .new_load_tiro(wire_new_loaded_tiro_uc_registra_tiro),
    .opcode_registra_tiro(wire_opcode_mux_out),
    /* outputs */
    .x_borda_min_tiro(wire_x_borda_min_tiro),
    .y_borda_min_tiro(wire_y_borda_min_tiro),
    .x_borda_max_tiro(wire_x_borda_max_tiro),
    .y_borda_max_tiro(wire_y_borda_max_tiro),
    .colisao_tiro_asteroide(wire_posicao_tiro_igual_asteroide),
    .rco_contador_tiro(wire_rco_contador_tiro),
    .opcode_tiro(wire_opcode_tiro),
    .loaded_tiro(wire_tiro_renderizado),
    .db_contador_tiro(),
    .db_wire_saida_som_sub_tiro(),
    .db_tiro_pos_x(wire_tiro_coor_x),
    .db_tiro_pos_y(wire_tiro_coor_y)
);

wire [3:0] wire_quantidade_vidas;
assign db_vidas = wire_quantidade_vidas;
decrementador #(4) decrementador( 
    /* inputs */
    .clock(clock), 
    .clr(wire_reset_contador_vidas | reset), 
    .ld(1&apos;b0), 
    .ent(1&apos;b1), 
    .enp(wire_enable_decrementador), 
    .D(4&apos;b0011), 
    /* outputs */
    .Q(wire_quantidade_vidas), 
    .rco(wire_vidas)
);


 contador_m #(2, 4) incrementacoes_tiro(
   .clock(clock),
   .zera_as(wire_reset_contador_tiro_uc_coordena_asteroides_tiros),
   .zera_s(1&apos;b0),
   .conta(wire_conta_contador_tiro_uc_coordena_asteroides_tiros),
   .Q(),
   .fim(wire_rco_contador_tiro_quantas_incrementacoes),
   .meio()
  );



 contador_m #(2, 4) incrementacoes_asteroides(
   .clock(clock),
   .zera_as(wire_reset_contador_asteroides_uc_coordena_asteroides_tiros),
   .zera_s(1&apos;b0),
   .conta(wire_conta_contador_asteroides_uc_coordena_asteroides_tiros),
   .Q(),
   .fim(wire_rco_contador_asteroides_quantas_incrementacoes),
   .meio()
  );

    
wire [5:0] wire_saida_reg_jogada;

  registrador_n #(6) reg_jogada (
    /* inputs */
    .clock  (clock),
    .clear  (wire_reset_reg_jogada),
    .enable (wire_enable_reg_jogada),
    .D      (chaves),
    /* output */
    .Q      (wire_saida_reg_jogada)
);


wire jogada_up;
wire jogada_down;
wire jogada_right;
wire jogada_left;
wire jogada_especial;
wire jogada_tiro;

or (wire_ocorreu_jogada, jogada_up, jogada_down, jogada_right, jogada_left, jogada_especial, jogada_tiro);

mux_reg_jogada mux_jogada(
    .select_mux_jogada (wire_saida_reg_jogada[5:2]),
    /* output */
    .saida_mux       (wire_opcode_mux_out)
);


edge_detector edge_detector_jogada_up(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[0]),
    .pulso(jogada_up)
);

edge_detector edge_detector_jogada_down(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[1]),
    .pulso(jogada_down)
);

edge_detector edge_detector_jogada_right(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[2]),
    .pulso(jogada_right)
);

edge_detector edge_detector_jogada_left(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[3]),
    .pulso(jogada_left)
);

edge_detector edge_detector_jogada_especial(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[4]),
    .pulso(jogada_especial)
);

edge_detector edge_detector_jogada_tiro(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(chaves[5]),
    .pulso(jogada_tiro)
);

edge_detector edge_detector_tiro(
    .clock(clock),
    .reset(1&apos;b0),
    .sinal(wire_saida_reg_jogada[0]),
    .pulso(wire_ocorreu_tiro)
);




endmodule

module asteroide(
    input clock,
    input conta_contador_aste,
    input reset_contador_aste,
    input [1:0] select_mux_pos_aste,
    input select_mux_coor_aste,
    input select_soma_sub_aste,
    input enable_reg_nave,
    input reset_reg_nave,
    input enable_mem_aste,
    input enable_load_aste,

    input new_load_aste,
    input new_destruido_aste,

    output colisao_aste_com_nave,
    output rco_contador_aste,
    output [1:0] opcode_aste,
    output destruido_aste,
    output loaded_aste,

    output [3:0] aste_coor_x,
    output [3:0] aste_coor_y,

    //saidas que podem ser retiradas
    output [3:0] db_contador_aste,
    output [4:0] db_wire_saida_som_sub_aste
);
         
    wire [3:0] wire_saida_contador;
    wire [3:0] wire_saida_mux_coor;
    wire [9:0] wire_saida_mux_pos;
    wire [9:0] wire_saida_memoria_aste;
    wire wire_select_som_sub;
    wire [4:0] wire_saida_som_sub;
    wire wire_saida_comparador_x;
    wire wire_saida_comparador_y;
    wire [9:0] wire_saida_reg_nave;
    wire [1:0] memoria_loaded;
    wire wire_rco_contador_aste;

    assign db_contador_aste = wire_saida_contador;
    assign db_wire_saida_som_sub_aste = wire_saida_som_sub;

    assign loaded_aste = memoria_loaded[1];
    assign destruido_aste = memoria_loaded[0];
    assign opcode_aste = wire_saida_memoria_aste[1:0];
    assign aste_coor_x = wire_saida_memoria_aste[9:6];
    assign aste_coor_y = wire_saida_memoria_aste[5:2];
    assign rco_contador_aste = wire_rco_contador_aste;
    assign wire_select_som_sub = select_soma_sub_aste;

contador_m #(16, 4) contador(
    /* inputs */
    .clock   (clock),
    .zera_as (reset_contador_aste),
    .zera_s  (),
    .conta   (conta_contador_aste),
   /* outputs */
    .Q       (wire_saida_contador),
    .fim     (wire_rco_contador_aste),
    .meio    ()
);

mux_pos #(4) mux_pos (
    /* inputs */
    .select_mux_pos (select_mux_pos_aste),
    .resul_soma      (wire_saida_som_sub[3:0]),
    .mem_coor_x      (wire_saida_memoria_aste[9:6]),
    .mem_coor_y      (wire_saida_memoria_aste[5:2]),
    .mem_opcode      (wire_saida_memoria_aste[1:0]),
    .random_x        (),
    .random_y        (),
    .random_opcode   (),
    /* output */
    .saida_mux       (wire_saida_mux_pos)
);

memoria_aster memoria_aster (
    /* inputs */
    .clk  (clock),
    .we   (enable_mem_aste),
    .data (wire_saida_mux_pos),
    .addr (wire_saida_contador),
    /* output */
    .q    (wire_saida_memoria_aste) 
);

mux_coor #(4) mux_coor(
    .select_mux_coor (select_mux_coor_aste),
    .mem_coor_x      (wire_saida_memoria_aste[9:6]),
    .mem_coor_y      (wire_saida_memoria_aste[5:2]),
    /* output */
    .saida_mux       (wire_saida_mux_coor)
);

somador_subtrator #(4) som_sub (
    /* inputs */
    .a(wire_saida_mux_coor),
    .b(4&apos;b0001),
    .select(wire_select_som_sub),
    /* output */
    .resul(wire_saida_som_sub)
);

comparador_85 #(4) comparador_x (
    
    .A    (wire_saida_memoria_aste[9:6]), 
    .B    (wire_saida_reg_nave[9:6]),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (wire_saida_comparador_x)
);

comparador_85 #(4) comparador_y (
    /* inputs */
    .A    (wire_saida_memoria_aste[5:2]), 
    .B    (wire_saida_reg_nave[5:2]),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (wire_saida_comparador_y)
);

and (colisao_aste_com_nave, wire_saida_comparador_x, wire_saida_comparador_y);

registrador_n #(10) reg_nave (
    /* inputs */
    .clock  (clock)                 ,
    .clear  (reset_reg_nave)        ,
    .enable (1&apos;b1),
    .D      (10&apos;b0111_0111_00)      ,
    /* output */
    .Q      (wire_saida_reg_nave)
);

memoria_load_aste memoria_load_aste (
    /* inputs */
    .clk  (clock),
    .we   (enable_load_aste),
    .data ({new_load_aste, new_destruido_aste}),
    .addr (wire_saida_contador),
    /* output */
    .q    (memoria_loaded) 
);


endmodule
module tiro(
    input clock,
    input conta_contador_tiro,
    input reset_contador_tiro,
    input [1:0] select_mux_pos_tiro,
    input select_mux_coor_tiro,
    input select_soma_sub_tiro,
    input enable_reg_nave,
    input reset_reg_nave,
    input enable_mem_tiro,
    input enable_load_tiro,
    input [3:0] aste_coor_x,
    input [3:0] aste_coor_y,
    input new_load_tiro,
    input [1:0] opcode_registra_tiro,
    output x_borda_min_tiro,
    output y_borda_min_tiro,
    output x_borda_max_tiro,
    output y_borda_max_tiro,
    output colisao_tiro_asteroide,
    output rco_contador_tiro,
    output [1:0] opcode_tiro,
    // output destruido,
    output loaded_tiro,
    //saidas que podem ser retiradas
    output [3:0] db_contador_tiro,
    output [4:0] db_wire_saida_som_sub_tiro,
    output [3:0] db_tiro_pos_x,
    output [3:0] db_tiro_pos_y
);
         
    wire [3:0] wire_saida_contador;
    wire [3:0] wire_saida_mux_coor;
    wire [9:0] wire_saida_mux_pos;
    wire [9:0] wire_saida_memoria_tiro;
    wire wire_select_som_sub;
    wire [4:0] wire_saida_som_sub;
    wire wire_saida_comparador_x;
    wire wire_saida_comparador_y;
    wire [9:0] wire_saida_reg_nave;
    wire [1:0] memoria_loaded;
    wire wire_rco_contador_tiro;

    assign db_contador_tiro = wire_saida_contador;
    assign db_wire_saida_som_sub_tiro = wire_saida_som_sub;

    assign loaded_tiro = memoria_loaded[1];
    // assign destruido = memoria_loaded[0];
    assign opcode_tiro = wire_saida_memoria_tiro[1:0];
    assign rco_contador_tiro = wire_rco_contador_tiro;
    assign wire_select_som_sub = select_soma_sub_tiro;

    assign db_tiro_pos_x = wire_saida_memoria_tiro[9:6];
    assign db_tiro_pos_y = wire_saida_memoria_tiro[5:2];

contador_m #(16, 4) contador(
    /* inputs */
    .clock   (clock),
    .zera_as (reset_contador_tiro),
    .zera_s  (),
    .conta   (conta_contador_tiro),
   /* outputs */
    .Q       (wire_saida_contador),
    .fim     (wire_rco_contador_tiro),
    .meio    ()
);

mux_pos #(4) mux_pos (
    /* inputs */
    .select_mux_pos (select_mux_pos_tiro),
    .resul_soma      (wire_saida_som_sub[3:0]),
    .mem_coor_x      (wire_saida_memoria_tiro[9:6]),
    .mem_coor_y      (wire_saida_memoria_tiro[5:2]),
    .mem_opcode      (wire_saida_memoria_tiro[1:0]),
    .random_x        (wire_saida_reg_nave[9:6]),
    .random_y        (wire_saida_reg_nave[5:2]),
    .random_opcode   (opcode_registra_tiro),
    /* output */
    .saida_mux       (wire_saida_mux_pos)
);

memoria_tiro memoria_tiro (
    /* inputs */
    .clk  (clock),
    .we   (enable_mem_tiro),
    .data (wire_saida_mux_pos),
    .addr (wire_saida_contador),
    /* output */
    .q    (wire_saida_memoria_tiro) 
);

mux_coor #(4) mux_coor(
    .select_mux_coor (select_mux_coor_tiro),
    .mem_coor_x      (wire_saida_memoria_tiro[9:6]),
    .mem_coor_y      (wire_saida_memoria_tiro[5:2]),
    /* output */
    .saida_mux       (wire_saida_mux_coor)
);

somador_subtrator #(4) som_sub (
    /* inputs */
    .a(wire_saida_mux_coor),
    .b(4&apos;b0001),
    .select(wire_select_som_sub),
    /* output */
    .resul(wire_saida_som_sub)
);

comparador_85 #(4) comparador_pos_x (
    
    .A    (wire_saida_memoria_tiro[9:6]), 
    .B    (aste_coor_x),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (wire_saida_comparador_x)
);

comparador_85 #(4) comparador_pos_y (
    /* inputs */
    .A    (wire_saida_memoria_tiro[5:2]), 
    .B    (aste_coor_y),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (wire_saida_comparador_y)
);

and (colisao_tiro_asteroide, wire_saida_comparador_x, wire_saida_comparador_y);

comparador_85 #(4) comparador_max_x (
    /* inputs */
    .A    (wire_saida_memoria_tiro[9:6]), 
    .B    (4&apos;d14),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (x_borda_max_tiro)
);

comparador_85 #(4) comparador_max_y (
    /* inputs */
    .A    (wire_saida_memoria_tiro[5:2]), 
    .B    (4&apos;d14),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (y_borda_max_tiro)
);

comparador_85 #(4) comparador_min_x (
    /* inputs */
    .A    (wire_saida_memoria_tiro[9:6]), 
    .B    (4&apos;d0),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (x_borda_min_tiro)
);

comparador_85 #(4) comparador_min_y (
    /* inputs */
    .A    (wire_saida_memoria_tiro[5:2]), 
    .B    (4&apos;d0),
    .ALBi (), 
    .AGBi (), 
    .AEBi (1&apos;b1),  
    /* outputs */
    .ALBo (), 
    .AGBo (), 
    .AEBo (y_borda_min_tiro)
);

registrador_n #(10) reg_nave (
    /* inputs */
    .clock  (clock)                 ,
    .clear  (reset_reg_nave)        ,
    .enable (enable_reg_nave | 1&apos;b1),
    .D      (10&apos;b0111_0111_00)      ,
    /* output */
    .Q      (wire_saida_reg_nave)
);

memoria_load_tiro memoria_load_tiro (
    /* inputs */
    .clk  (clock),
    .we   (enable_load_tiro),
    .data ({new_load_tiro, 1&apos;b0}),
    .addr (wire_saida_contador),
    /* output */
    .q    (memoria_loaded) 
);


endmodule
module uc_compara_asteroides_com_nave_e_tiros (
        input clock,
        input reset,
        input iniciar_comparacao_tiros_nave_asteroides,
        input posicao_asteroide_igual_nave,
        input ha_vidas,
        input rco_contador_asteroides,
        input fim_compara_tiros_e_asteroides,

        input loaded_asteroide,
        input destruido_asteroide,

        output reg enable_decrementador,
        output reg new_loaded_asteroide,
        output reg new_destruido_asteroide,
        output reg fim_compara_asteroides_com_tiros_e_nave,
        output reg enable_load_asteroide,
        output reg conta_contador_asteroides,
        output reg sinal_compara_tiros_e_asteroide,
        output reg reset_contador_asteroides,

        output reg [4:0] db_estado_compara_asteroides_com_nave_e_tiros
);

    parameter inicio                             = 5&apos;b00000; // 0
    parameter espera                             = 5&apos;b00001; // 1
    parameter reset_contador                     = 5&apos;b00010; // 2
    parameter compara                            = 5&apos;b00011; // 3
    parameter decrementa_vida                    = 5&apos;b00100; // 4
    parameter destroi_asteroide                  = 5&apos;b00101; // 5
    parameter salva_destruicao                   = 5&apos;b00110; // 6
    parameter compara_tiros_e_asteroides         = 5&apos;b00111; // 7
    parameter espera_compara_tiros_e_asteroides  = 5&apos;b01000; // 8
    parameter incrementa_contador_de_asteroides  = 5&apos;b01001; // 9
    parameter fim_comparacao                     = 5&apos;b01010; // 10
    parameter aux                                = 5&apos;b01011; // 11
    parameter erro                               = 5&apos;b01111; // F


    // Variáveis de estado
    reg [4:0] estado_atual, proximo_estado;

    // Memória de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            estado_atual &lt;= inicio;
        else
            estado_atual &lt;= proximo_estado;
    end


    // Lógica de transição de estados
    always @* begin
        case (estado_atual)
            inicio:                              proximo_estado = espera;
            espera:                              proximo_estado = iniciar_comparacao_tiros_nave_asteroides ? reset_contador : espera;
            reset_contador:                      proximo_estado = compara;

            compara:                             proximo_estado = (posicao_asteroide_igual_nave &amp;&amp; loaded_asteroide &amp;&amp; ~destruido_asteroide) ? decrementa_vida : 
                                                                  rco_contador_asteroides ? compara_tiros_e_asteroides : incrementa_contador_de_asteroides;
            
            decrementa_vida:                     proximo_estado = ha_vidas ? destroi_asteroide : fim_comparacao;
            destroi_asteroide:                   proximo_estado = salva_destruicao;
            salva_destruicao:                    proximo_estado = rco_contador_asteroides ? compara_tiros_e_asteroides : incrementa_contador_de_asteroides;
            compara_tiros_e_asteroides:          proximo_estado = espera_compara_tiros_e_asteroides;
            espera_compara_tiros_e_asteroides:   proximo_estado = fim_compara_tiros_e_asteroides ? fim_comparacao : espera_compara_tiros_e_asteroides;
            incrementa_contador_de_asteroides:   proximo_estado = aux;
            aux:                                 proximo_estado = compara;
            fim_comparacao:                      proximo_estado = espera;
            default:                             proximo_estado = inicio;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin

        reset_contador_asteroides = (estado_atual == reset_contador)         ? 1&apos;b1 : 1&apos;b0;
        enable_decrementador      = (estado_atual == decrementa_vida)        ? 1&apos;b1 : 1&apos;b0;
        new_loaded_asteroide      = (estado_atual == destroi_asteroide ||
                                     estado_atual == salva_destruicao)       ? 1&apos;b0 : 1&apos;b1;
        new_destruido_asteroide   = (estado_atual == destroi_asteroide ||
                                     estado_atual == salva_destruicao)       ? 1&apos;b1 : 1&apos;b0;
        enable_load_asteroide      = (estado_atual == salva_destruicao)       ? 1&apos;b1 : 1&apos;b0;
        fim_compara_asteroides_com_tiros_e_nave = (estado_atual == fim_comparacao)                        ? 1&apos;b1 : 1&apos;b0;
        conta_contador_asteroides               = (estado_atual == incrementa_contador_de_asteroides)     ? 1&apos;b1 : 1&apos;b0;
        sinal_compara_tiros_e_asteroide         = (estado_atual == compara_tiros_e_asteroides)            ? 1&apos;b1 : 1&apos;b0;

        // Saída de depuração (estado)
        case (estado_atual)
            inicio:                             db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00000; // 0
            espera:                             db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00001; // 1
            reset_contador:                     db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00010; // 2
            compara:                            db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00011; // 3
            decrementa_vida:                    db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00100; // 4
            destroi_asteroide:                  db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00101; // 5
            salva_destruicao:                   db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00110; // 6
            compara_tiros_e_asteroides:         db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00111; // 7
            espera_compara_tiros_e_asteroides:  db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b01000; // 8
            incrementa_contador_de_asteroides:  db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b01001; // 9
            fim_comparacao:                     db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b01010; // 10
            aux:                                db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b01011; // 11
            erro:                               db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b01111; // F  
            default:                            db_estado_compara_asteroides_com_nave_e_tiros = 5&apos;b00000; 

        endcase
    end
endmodule


module uc_compara_tiros_e_asteroides (
        input clock,
        input reset,
        input compara_tiros_e_asteroides,
        input posicao_tiro_igual_asteroide,
        input rco_contador_asteroides,
        input rco_contador_tiros,
        input tiro_renderizado,
        input aste_renderizado,

        output reg reset_contador_asteroides,
        output reg reset_contador_tiros,
        output reg enable_load_tiro,
        output reg enable_load_asteroide,
        output reg loaded_tiro,
        output reg loaded_asteroide,
        output reg asteroide_destruido,
        output reg conta_contador_asteroides,
        output reg conta_contador_tiros,

        output reg s_fim_comparacao,
        output reg [4:0] db_estado_compara_tiros_e_asteroide
);

    parameter inicio                = 5&apos;b00000; // 0
    parameter espera                = 5&apos;b00001; // 1
    parameter reseta_contador       = 5&apos;b00010; // 2
    parameter verifica_renderizado  = 5&apos;b00011; // 3
    parameter compara               = 5&apos;b00100; // 4
    parameter destroi_asteroide     = 5&apos;b00101; // 5
    parameter salva_destruicao      = 5&apos;b00110; // 6
    parameter incrementa_asteroides = 5&apos;b00111; // 7
    parameter incrementa_tiros      = 5&apos;b01000; // 8
    parameter fim_comparacao        = 5&apos;b01001; // 9
    parameter auxiliar_tiro         = 5&apos;b01010; // 10
    parameter auxiliar_aste         = 5&apos;b01011; // 11
    parameter erro                  = 5&apos;b01111; // F


    // Variáveis de estado
    reg [4:0] estado_atual, proximo_estado;

    // Memória de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            estado_atual &lt;= inicio;
        else
            estado_atual &lt;= proximo_estado;
    end


    // Lógica de transição de estados
    always @* begin
        case (estado_atual)
            inicio:                proximo_estado = espera;
            espera:                proximo_estado = compara_tiros_e_asteroides ? reseta_contador : espera;
            reseta_contador:       proximo_estado = verifica_renderizado;
            verifica_renderizado:  proximo_estado = (tiro_renderizado &amp;&amp; aste_renderizado) ? compara : 
                                                    (~rco_contador_asteroides &amp;&amp; ~aste_renderizado) ? incrementa_asteroides :
                                                    (~tiro_renderizado &amp;&amp; ~rco_contador_tiros) ? incrementa_tiros : 
                                                    (rco_contador_asteroides &amp;&amp; rco_contador_tiros) ? fim_comparacao : 
                                                    (rco_contador_asteroides &amp;&amp; ~rco_contador_tiros) ?  incrementa_tiros : incrementa_asteroides; //adicionar no diagrama
            compara:               proximo_estado = posicao_tiro_igual_asteroide? destroi_asteroide : 
                                                    (~posicao_tiro_igual_asteroide &amp;&amp; ~rco_contador_asteroides) ? incrementa_asteroides :
                                                    (~posicao_tiro_igual_asteroide &amp;&amp; rco_contador_asteroides &amp;&amp; ~rco_contador_tiros) ? incrementa_tiros : 
                                                    (~posicao_tiro_igual_asteroide &amp;&amp; rco_contador_asteroides &amp;&amp; rco_contador_tiros) ? fim_comparacao : erro;
            destroi_asteroide:     proximo_estado = salva_destruicao;
            salva_destruicao:      proximo_estado = ~rco_contador_asteroides ? incrementa_asteroides :
                                                    (rco_contador_asteroides &amp;&amp; ~rco_contador_tiros) ? incrementa_tiros :
                                                    (rco_contador_asteroides &amp;&amp; rco_contador_tiros) ? fim_comparacao : erro;
            fim_comparacao:        proximo_estado = espera;
            incrementa_asteroides: proximo_estado = auxiliar_aste;
            auxiliar_aste:         proximo_estado = verifica_renderizado;
            incrementa_tiros:      proximo_estado = auxiliar_tiro;
            auxiliar_tiro:         proximo_estado = verifica_renderizado;
            default:               proximo_estado = inicio;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        reset_contador_asteroides    =   (estado_atual == reseta_contador ||
                                          estado_atual == incrementa_tiros)      ? 1&apos;b1 : 1&apos;b0;
        reset_contador_tiros         =   (estado_atual == reseta_contador)       ? 1&apos;b1 : 1&apos;b0;
        enable_load_tiro             =   (estado_atual == salva_destruicao)      ? 1&apos;b1 : 1&apos;b0;
        enable_load_asteroide        =   (estado_atual == salva_destruicao)      ? 1&apos;b1 : 1&apos;b0;
        loaded_tiro                  =   (estado_atual == destroi_asteroide ||
                                          estado_atual == salva_destruicao  )    ? 1&apos;b0 : 1&apos;b1;
        loaded_asteroide             =   (estado_atual == destroi_asteroide ||
                                          estado_atual == salva_destruicao  )    ? 1&apos;b0 : 1&apos;b1;
        asteroide_destruido          =   (estado_atual == destroi_asteroide ||
                                          estado_atual == salva_destruicao  )    ? 1&apos;b1 : 1&apos;b0;
        conta_contador_asteroides    =   (estado_atual == incrementa_asteroides) ? 1&apos;b1 : 1&apos;b0;
        conta_contador_tiros         =   (estado_atual == incrementa_tiros)      ? 1&apos;b1 : 1&apos;b0;
        s_fim_comparacao             =   (estado_atual == fim_comparacao)        ? 1&apos;b1 : 1&apos;b0;


        // Saída de depuração (estado)
        case (estado_atual)
            inicio:                db_estado_compara_tiros_e_asteroide = 5&apos;b00000; // 0
            espera:                db_estado_compara_tiros_e_asteroide = 5&apos;b00001; // 1
            reseta_contador:       db_estado_compara_tiros_e_asteroide = 5&apos;b00010; // 2
            verifica_renderizado:  db_estado_compara_tiros_e_asteroide = 5&apos;b00011; // 3
            compara:               db_estado_compara_tiros_e_asteroide = 5&apos;b00100; // 4
            destroi_asteroide:     db_estado_compara_tiros_e_asteroide = 5&apos;b00101; // 5
            salva_destruicao:      db_estado_compara_tiros_e_asteroide = 5&apos;b00110; // 6
            incrementa_asteroides: db_estado_compara_tiros_e_asteroide = 5&apos;b00111; // 7
            incrementa_tiros:      db_estado_compara_tiros_e_asteroide = 5&apos;b01000; // 8
            fim_comparacao:        db_estado_compara_tiros_e_asteroide = 5&apos;b01001; // 9
            auxiliar_tiro:         db_estado_compara_tiros_e_asteroide = 5&apos;b01010; // 10
            auxiliar_aste:         db_estado_compara_tiros_e_asteroide = 5&apos;b01011; // 11
            erro:                  db_estado_compara_tiros_e_asteroide = 5&apos;b01111; // F  
            default:               db_estado_compara_tiros_e_asteroide = 5&apos;b00000; 
        endcase
    end
endmodule


module uc_coordena_asteroides_tiros (
        input clock                    ,
        input reset                    ,
        input move_tiro_e_asteroides   , // sinal que inicia a máquina de estado
        input rco_contador_tiro        , // rco do contador (contador que conta quantas vezes as posições dos tiros serão incrementados)
        input rco_contador_asteroides  , 
        input fim_move_tiros           , // entrada que indica o fim da movimentação dos tiros
        input fim_move_asteroides      , // entrada que indica o fim da movimentação dos asteroides
        input fim_comparacao_asteroides_com_a_nave_e_tiros, // entrada que indica o fim da comparação dos tiros tiros, nave e asteroide
        input fim_comparacao_tiros_e_asteroides           , // entrada que indica o fim da comparação dos tiros tiros e asteroides
        // saidas para outras máquinas de estados de hierarquia menor 
        output reg movimenta_tiro                       , // saída que inicia a movimentação dos tiros
        output reg sinal_movimenta_asteroides                 , // saída que inicia a movimentação dos asteroides
        output reg sinal_compara_tiros_e_asteroides            , // saída que inicia a comparação dos tiros e asteroids
        output reg sinal_compara_asteroides_com_a_nave_e_tiro , // saída que inicia a comparação dos asteroids com tiros e nave
        //contadores 
        output reg conta_contador_tiro                  , // conta o contador de quantas vezes o tiro vai ser incrementado
        output reg reset_contador_tiro                  , // reset do contador de quantas vezes o tiro vai ser incrementado
        output reg conta_contador_asteroides            , // conta o contador de quantas vezes o asteroide vai ser incrementado
        output reg reset_contador_asteroides            , // reset do contador de quantas vezes o asteroide vai ser incrementado
        // saida para a máquina de estados principal
        output reg fim_move_tiro_e_asteroides,             // sinal que indica o fim da incrementação dos tiros e asteroides
        output reg [4:0] db_estado_coordena_asteroides_tiros
);

    parameter inicio                                      = 5&apos;b00000; // 0
    parameter espera                                      = 5&apos;b00001; // 1
    parameter reset_contadores                            = 5&apos;b00010; // 2
    parameter compara_tiros_e_asteroides                  = 5&apos;b00011; // 3
    parameter espera_compara_tiros_e_asteroides           = 5&apos;b00100; // 4
    parameter move_tiros                                  = 5&apos;b00101; // 5
    parameter espera_move_tiros                           = 5&apos;b00110; // 6
    parameter incrementa_contador_tiros                   = 5&apos;b00111; // 7
    parameter compara_asteroides_com_a_nave_e_tiro        = 5&apos;b01000; // 8
    parameter espera_compara_asteroides_com_a_nave_e_tiro = 5&apos;b01001; // 9
    parameter move_asteroides                             = 5&apos;b01010; // 10
    parameter espera_move_asteroides                      = 5&apos;b01011; // 11
    parameter incrementa_contador_asteroides              = 5&apos;b01100; // 12
    parameter fim_movimentacao                            = 5&apos;b01101; // 13
    parameter erro                                        = 5&apos;b01111; // F


    // Variáveis de estado
    reg [4:0] estado_atual, proximo_estado;

    // Memória de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            estado_atual &lt;= inicio;
        else
            estado_atual &lt;= proximo_estado;
    end


    // Lógica de transição de estados
    always @* begin
        case (estado_atual)
            inicio:                                      proximo_estado = espera;
            espera:                                      proximo_estado = move_tiro_e_asteroides ? reset_contadores : espera;
            reset_contadores:                            proximo_estado = compara_tiros_e_asteroides;
            compara_tiros_e_asteroides:                  proximo_estado = espera_compara_tiros_e_asteroides;
            espera_compara_tiros_e_asteroides:           proximo_estado = (fim_comparacao_tiros_e_asteroides &amp;&amp; rco_contador_tiro) ? compara_asteroides_com_a_nave_e_tiro :
                                                                          (fim_comparacao_tiros_e_asteroides &amp;&amp; ~rco_contador_tiro) ? move_tiros : espera_compara_tiros_e_asteroides;
            move_tiros:                                  proximo_estado = espera_move_tiros;
            espera_move_tiros:                           proximo_estado = fim_move_tiros ? incrementa_contador_tiros : espera_move_tiros;
            incrementa_contador_tiros:                   proximo_estado = compara_tiros_e_asteroides;
            compara_asteroides_com_a_nave_e_tiro:        proximo_estado = espera_compara_asteroides_com_a_nave_e_tiro;
            espera_compara_asteroides_com_a_nave_e_tiro: proximo_estado = (fim_comparacao_asteroides_com_a_nave_e_tiros &amp;&amp; rco_contador_asteroides) ? fim_movimentacao :
                                                                          (fim_comparacao_asteroides_com_a_nave_e_tiros &amp;&amp; ~rco_contador_asteroides) ? move_asteroides :
                                                                          espera_compara_asteroides_com_a_nave_e_tiro;
            move_asteroides:                             proximo_estado = espera_move_asteroides;
            espera_move_asteroides:                      proximo_estado = fim_move_asteroides ? incrementa_contador_asteroides : espera_move_asteroides;
            incrementa_contador_asteroides:              proximo_estado = compara_asteroides_com_a_nave_e_tiro;
            fim_movimentacao:                            proximo_estado = espera;
            default:                                     proximo_estado = inicio;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        reset_contador_tiro             =   (estado_atual == reset_contadores)               ? 1&apos;b1 : 1&apos;b0;
        reset_contador_asteroides       =   (estado_atual == reset_contadores)               ? 1&apos;b1 : 1&apos;b0;
        sinal_compara_tiros_e_asteroides=   (estado_atual == compara_tiros_e_asteroides)     ? 1&apos;b1 : 1&apos;b0;
        movimenta_tiro                  =   (estado_atual == move_tiros)                     ? 1&apos;b1 : 1&apos;b0;
        conta_contador_tiro             =   (estado_atual == incrementa_contador_tiros)      ? 1&apos;b1 : 1&apos;b0;
        sinal_movimenta_asteroides      =   (estado_atual == move_asteroides)                ? 1&apos;b1 : 1&apos;b0;
        conta_contador_asteroides       =   (estado_atual == incrementa_contador_asteroides) ? 1&apos;b1 : 1&apos;b0;
        fim_move_tiro_e_asteroides      =   (estado_atual == fim_movimentacao)               ? 1&apos;b1 : 1&apos;b0;
        sinal_compara_asteroides_com_a_nave_e_tiro = (estado_atual == compara_asteroides_com_a_nave_e_tiro) ? 1&apos;b1 : 1&apos;b0;


        // Saída de depuração (estado)
        case (estado_atual)
            inicio:                                      db_estado_coordena_asteroides_tiros = 5&apos;b00000; // 0
            espera:                                      db_estado_coordena_asteroides_tiros = 5&apos;b00001; // 1
            reset_contadores:                            db_estado_coordena_asteroides_tiros = 5&apos;b00010; // 2
            compara_tiros_e_asteroides:                  db_estado_coordena_asteroides_tiros = 5&apos;b00011; // 3
            espera_compara_tiros_e_asteroides:           db_estado_coordena_asteroides_tiros = 5&apos;b00100; // 4
            move_tiros:                                  db_estado_coordena_asteroides_tiros = 5&apos;b00101; // 5
            espera_move_tiros:                           db_estado_coordena_asteroides_tiros = 5&apos;b00110; // 6
            incrementa_contador_tiros:                   db_estado_coordena_asteroides_tiros = 5&apos;b00111; // 7
            compara_asteroides_com_a_nave_e_tiro:        db_estado_coordena_asteroides_tiros = 5&apos;b01000; // 8
            espera_compara_asteroides_com_a_nave_e_tiro: db_estado_coordena_asteroides_tiros = 5&apos;b01001; // 9
            move_asteroides:                             db_estado_coordena_asteroides_tiros = 5&apos;b01010; // 10
            espera_move_asteroides:                      db_estado_coordena_asteroides_tiros = 5&apos;b01011; // 11
            incrementa_contador_asteroides:              db_estado_coordena_asteroides_tiros = 5&apos;b01100; // 12
            fim_movimentacao:                            db_estado_coordena_asteroides_tiros = 5&apos;b01101; // 13
            erro:                                        db_estado_coordena_asteroides_tiros = 5&apos;b01111; // F  
            default:                                     db_estado_coordena_asteroides_tiros = 5&apos;b00000; 
        endcase
    end

endmodule





module uc_jogo_principal (

        input clock,
        input iniciar, // entrada que inicia a máquina de estados
        input reset,
        input vidas,


        input fim_movimentacao_asteroides_e_tiros, // indica o fim da uc_coordena_asteroides_tiros.v
        input fim_registra_tiros,
        input ocorreu_tiro,
        input ocorreu_jogada,

        // sinais do registrador
        output reg enable_reg_jogada,
        output reg reset_reg_jogada, 
        output reg inicia_registra_tiros,
        output reg inicia_movimentacao_asteroides_e_tiros, // saída para o inicio da máquina de estados uc_coordena_asteroides_tiros.v

        // resets de contadores
        output reg reset_contador_asteroides,
        output reg reset_contador_tiro,
        output reg reset_contador_vidas,
        // resets de outras máquinas de estados
        output reg reset_maquinas,

        output reg pronto,
        output reg [4:0] db_estado_jogo_principal
);

 /* declaração dos estados dessa UC */
        parameter inicial                                 = 5&apos;b00000; // 0
        parameter inicializa_elementos                    = 5&apos;b00001; // 1
        parameter espera_jogada                           = 5&apos;b00010; // 2
        parameter registra_jogada                         = 5&apos;b00011; // 3
        parameter termina_movimentacao_asteroides_e_tiros = 5&apos;b00100; // 4
        parameter espera_registra_tiros                   = 5&apos;b00101; // 5 
        parameter fim_jogo                                = 5&apos;b00110; // 6 
        parameter inicia_state_registra_tiros             = 5&apos;b00111; // 7
        parameter espera_salvamento                       = 5&apos;b01000; // 8
        parameter espera_salvamento2                       = 5&apos;b01001; // 9


        parameter erro                                    = 5&apos;b01111; // F

// Variáveis de estado
        reg [3:0] estado_atual, proximo_estado;

        // Memória de estado
        always @(posedge clock or posedge reset) begin
                if (reset)
                        estado_atual &lt;= inicial;
                else
                        estado_atual &lt;= proximo_estado;
        end

        // mudança de estados
        always @* begin
        case (estado_atual)
                inicial:              proximo_estado = iniciar ? inicializa_elementos : inicial;                                 
                inicializa_elementos: proximo_estado = espera_jogada;
                espera_jogada:        proximo_estado = ~vidas ? fim_jogo :
                                                       (vidas &amp;&amp; ocorreu_jogada)  ? registra_jogada : 
                                                       (vidas &amp;&amp; ~ocorreu_jogada) ? espera_jogada   : erro;
                registra_jogada:      proximo_estado = espera_salvamento;

                espera_salvamento:   proximo_estado = espera_salvamento2; 

                espera_salvamento2: proximo_estado = ~vidas ? fim_jogo : 
                                                       (vidas &amp;&amp; ocorreu_tiro)  ? termina_movimentacao_asteroides_e_tiros :
                                                       (vidas &amp;&amp; ~ocorreu_tiro) ? espera_jogada : erro; 

                termina_movimentacao_asteroides_e_tiros: proximo_estado = (fim_movimentacao_asteroides_e_tiros &amp;&amp; ~vidas) ? fim_jogo :
                                                                          (fim_movimentacao_asteroides_e_tiros &amp;&amp; vidas)  ? inicia_state_registra_tiros :
                                                                          termina_movimentacao_asteroides_e_tiros;
                inicia_state_registra_tiros:     proximo_estado = espera_registra_tiros;
                espera_registra_tiros:                          proximo_estado = fim_registra_tiros ? espera_jogada : espera_registra_tiros;                      
                fim_jogo:                                proximo_estado = reset ? inicial : fim_jogo;                                
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        reset_reg_jogada          = (estado_atual == inicializa_elementos ||
                                     estado_atual == espera_jogada        ||
                                     estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        reset_contador_asteroides = (estado_atual == inicializa_elementos ||
                                     estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        reset_contador_tiro       = (estado_atual == inicializa_elementos ||
                                     estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        reset_maquinas            = (estado_atual == inicial               ||
                                     estado_atual == inicializa_elementos  ||
                                     estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        reset_contador_vidas      = (estado_atual == inicializa_elementos ||
                                     estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        enable_reg_jogada         = (estado_atual == registra_jogada)      ? 1&apos;b1 : 1&apos;b0;
        inicia_registra_tiros     = (estado_atual == inicia_state_registra_tiros)       ? 1&apos;b1 : 1&apos;b0;
        pronto                    = (estado_atual == fim_jogo)             ? 1&apos;b1 : 1&apos;b0;
        inicia_movimentacao_asteroides_e_tiros = (estado_atual == espera_jogada) ? 1&apos;b1 : 1&apos;b0;

        // Saída de depuração (estado)
        case (estado_atual)
                inicial                                 : db_estado_jogo_principal = 5&apos;b00000; // 0
                inicializa_elementos                    : db_estado_jogo_principal = 5&apos;b00001; // 1
                espera_jogada                           : db_estado_jogo_principal = 5&apos;b00010; // 2 
                registra_jogada                         : db_estado_jogo_principal = 5&apos;b00011; // 3 
                termina_movimentacao_asteroides_e_tiros : db_estado_jogo_principal = 5&apos;b00100; // 4 
                espera_registra_tiros                   : db_estado_jogo_principal = 5&apos;b00101; // 5 
                fim_jogo                                : db_estado_jogo_principal = 5&apos;b00110; // 6
                inicia_state_registra_tiros             : db_estado_jogo_principal = 5&apos;b00111; // 7
                espera_salvamento                       : db_estado_jogo_principal = 5&apos;b01000; // 8
                espera_salvamento2                      : db_estado_jogo_principal = 5&apos;b01001; // 9
                erro                                    : db_estado_jogo_principal = 5&apos;b01111; // F
                default                                 : db_estado_jogo_principal = 5&apos;b11111;
        endcase
    end

endmodule

module uc_move_asteroides (
        input clock,
        input movimenta_aste,
        input reset,
        input [1:0] opcode_aste,
        input loaded_aste,
        input rco_contador_aste,

        //saidas 
        output reg [1:0] select_mux_pos_aste,   //seletor do mux da posição 
        output reg select_mux_coor_aste,  //seletor do mux da posição 
        output reg select_soma_sub,  
        output reg reset_contador_aste,
        output reg conta_contador_aste, 
        output reg enable_mem_aste, // enable da memoria de tiros
        output reg movimentacao_concluida_aste, // sinal que indica o fim da movimentação dos tiros
        output reg [4:0] db_estado_move_aste

);

    parameter inicio                 = 5&apos;b00000; // 0
    parameter espera                 = 5&apos;b00001; // 1
    parameter reseta_contador        = 5&apos;b00010; // 2
    parameter verifica_loaded        = 5&apos;b00011; // 3
    parameter verifica_opcode        = 5&apos;b00100; // 4
    parameter horizontal_crescente   = 5&apos;b00101; // 5 
    parameter horizontal_decrescente = 5&apos;b00110; // 6
    parameter vertical_crescente     = 5&apos;b00111; // 7
    parameter vertical_decrescente   = 5&apos;b01000; // 8
    parameter salva_posicao          = 5&apos;b01001; // 9
    parameter incrementa_contador    = 5&apos;b01010; // 10
    parameter aux                    = 5&apos;b01011; // 11
    parameter sinaliza               = 5&apos;b01110; // 12
    parameter erro                   = 5&apos;b11111; // erro

// Variáveis de estado
        reg [3:0] estado_atual, proximo_estado;

        // Memória de estado
        always @(posedge clock or posedge reset) begin
                if (reset)
                        estado_atual &lt;= inicio;
                else
                        estado_atual &lt;= proximo_estado;
        end

        // mudança de estados
        always @* begin
        case (estado_atual) 
                inicio:                proximo_estado = espera;
                espera:                proximo_estado = movimenta_aste ? reseta_contador : espera;
                reseta_contador:       proximo_estado = verifica_loaded;
                verifica_loaded:       proximo_estado = loaded_aste ? verifica_opcode :
                                                        (~loaded_aste &amp;&amp; rco_contador_aste) ? sinaliza :
                                                        (~loaded_aste &amp;&amp; ~rco_contador_aste) ? incrementa_contador : erro;
                verifica_opcode:        proximo_estado = opcode_aste == 2&apos;b00 ? horizontal_crescente : 
                                                         opcode_aste == 2&apos;b01 ? horizontal_decrescente :
                                                         opcode_aste == 2&apos;b10 ? vertical_crescente : vertical_decrescente;
                horizontal_crescente:   proximo_estado = salva_posicao; 
                horizontal_decrescente: proximo_estado = salva_posicao;
                vertical_crescente:     proximo_estado = salva_posicao;
                vertical_decrescente:   proximo_estado = salva_posicao;
                salva_posicao:          proximo_estado = rco_contador_aste ? sinaliza : incrementa_contador;
                incrementa_contador:    proximo_estado = aux;
                aux:                    proximo_estado = verifica_loaded;
                sinaliza:               proximo_estado = espera;
                default:                proximo_estado = inicio;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        reset_contador_aste         = (estado_atual == reseta_contador)        ? 1&apos;b1 : 1&apos;b0;
        movimentacao_concluida_aste = (estado_atual == sinaliza)               ? 1&apos;b1 : 1&apos;b0;
        conta_contador_aste         = (estado_atual == incrementa_contador)    ? 1&apos;b1 : 1&apos;b0;
        enable_mem_aste             = (estado_atual == horizontal_crescente    || 
                                       estado_atual == horizontal_decrescente  ||
                                       estado_atual == vertical_crescente      ||
                                       estado_atual == vertical_decrescente)   ? 1&apos;b1 : 1&apos;b0;
        select_soma_sub             = (estado_atual == horizontal_decrescente  ||
                                       estado_atual == vertical_decrescente)   ? 1&apos;b1 : 1&apos;b0;
        select_mux_pos_aste         = (estado_atual == horizontal_crescente    ||
                                       estado_atual == horizontal_decrescente) ? 2&apos;b01 :  
                                      (estado_atual == vertical_crescente      ||
                                       estado_atual == vertical_decrescente)   ? 2&apos;b10 : 2&apos;b00;
        select_mux_coor_aste        = (estado_atual == vertical_crescente      ||
                                       estado_atual == vertical_decrescente)   ? 1&apos;b1 : 1&apos;b0;
        

        // Saída de depuração (estado)
        case (estado_atual)
            inicio:                 db_estado_move_aste = 5&apos;b00000; // 0
            espera:                 db_estado_move_aste = 5&apos;b00001; // 1
            reseta_contador:        db_estado_move_aste = 5&apos;b00010; // 2
            verifica_loaded:        db_estado_move_aste = 5&apos;b00011; // 3
            verifica_opcode:        db_estado_move_aste = 5&apos;b00100; // 4
            horizontal_crescente:   db_estado_move_aste = 5&apos;b00101; // 5 
            horizontal_decrescente: db_estado_move_aste = 5&apos;b00110; // 6
            vertical_crescente:     db_estado_move_aste = 5&apos;b00111; // 7
            vertical_decrescente:   db_estado_move_aste = 5&apos;b01000; // 8
            salva_posicao:          db_estado_move_aste = 5&apos;b01001; // 9
            incrementa_contador:    db_estado_move_aste = 5&apos;b01010; // 10
            aux:                    db_estado_move_aste = 5&apos;b01011; // 11
            sinaliza:               db_estado_move_aste = 5&apos;b01110; // 12
            erro:                   db_estado_move_aste = 5&apos;b11111; // erro
            default:                db_estado_move_aste = 5&apos;b11111; // 
        endcase
    end
endmodule



module uc_move_tiros (
        input clock                    ,
        input movimenta_tiro           ,
        input reset                    ,
        input [1:0] opcode_tiro        ,
        input loaded_tiro              ,
        input rco_contador_tiro        ,

        //entradas para verificar se o tiro saiu da tela
        input x_borda_max_tiro         , //true se a coord. X do tiro estiver no MAXIMO da horizontal
        input y_borda_max_tiro         , //true se a coord. Y do tiro estiver no MAXIMO da vetical
        input x_borda_min_tiro         , //true se a coord. Y do tiro estiver no MINIMO da horizontal
        input y_borda_min_tiro         , //true se a coord. Y do tiro estiver no MINIMO da vetical

        //saidas 
        output reg [1:0] select_mux_pos_tiro ,   //seletor do mux da posição 
        output reg select_mux_coor_tiro,  //seletor do mux da posição 
        output reg select_soma_sub     ,  
        output reg reset_contador_tiro ,
        output reg conta_contador_tiro , 
        output reg enable_mem_tiro     , // enable da memoria de tiros
        output reg enable_load_tiro    ,
        output reg new_loaded,                 // valor do loaded que será salvo na nossa memoria (é 0 quando tiro sair da tela) 
        output reg movimentacao_concluida_tiro, // sinal que indica o fim da movimentação dos tiros
        output reg [4:0] db_estado_move_tiros

);

    parameter inicio                 = 5&apos;b00000; // 0
    parameter espera                 = 5&apos;b00001; // 1
    parameter reseta_contador        = 5&apos;b00010; // 2
    parameter verifica_loaded        = 5&apos;b00011; // 3
    parameter verifica_saiu_tela     = 5&apos;b00100; // 4
    parameter altera_loaded          = 5&apos;b00101; // 5
    parameter salva_loaded           = 5&apos;b00110; // 6
    parameter incrementa_contador    = 5&apos;b00111; // 7
    parameter verifica_opcode        = 5&apos;b01000; // 8 
    parameter horizontal_crescente   = 5&apos;b01001; // 9 
    parameter horizontal_decrescente = 5&apos;b01010; // A
    parameter vertical_crescente     = 5&apos;b01011; // B
    parameter vertical_decrescente   = 5&apos;b01100; // C
    parameter salva_posicao          = 5&apos;b01101; // D
    parameter sinaliza               = 5&apos;b01110; // E
    parameter aux                    = 5&apos;b01111; // F
    parameter erro                   = 5&apos;b11111; // erro

// Variáveis de estado
        reg [3:0] estado_atual, proximo_estado;

        // Memória de estado
        always @(posedge clock or posedge reset) begin
                if (reset)
                        estado_atual &lt;= inicio;
                else
                        estado_atual &lt;= proximo_estado;
        end

        // mudança de estados
        always @* begin
        case (estado_atual) 
                inicio:                proximo_estado = espera;
                espera:                proximo_estado = movimenta_tiro ? reseta_contador : espera;
                reseta_contador:       proximo_estado = verifica_loaded;
                verifica_loaded:       proximo_estado =   loaded_tiro                        ? verifica_saiu_tela  : 
                                                        (~loaded_tiro &amp;&amp; ~rco_contador_tiro) ? incrementa_contador : 
                                                        (~loaded_tiro &amp;&amp; rco_contador_tiro)  ? sinaliza : verifica_loaded;
                verifica_saiu_tela:    proximo_estado = (opcode_tiro == 2&apos;b00 &amp;&amp; x_borda_max_tiro  ||
                                                         opcode_tiro == 2&apos;b01 &amp;&amp; x_borda_min_tiro  ||
                                                         opcode_tiro == 2&apos;b10 &amp;&amp; y_borda_max_tiro  ||
                                                         opcode_tiro == 2&apos;b11 &amp;&amp; y_borda_min_tiro  )? altera_loaded : verifica_opcode;
                altera_loaded:          proximo_estado = salva_loaded;
                salva_loaded:           proximo_estado = rco_contador_tiro ? sinaliza : incrementa_contador;
                verifica_opcode:        proximo_estado = opcode_tiro == 2&apos;b00 ? horizontal_crescente : 
                                                         opcode_tiro == 2&apos;b01 ? horizontal_decrescente :
                                                         opcode_tiro == 2&apos;b10 ? vertical_crescente : vertical_decrescente;
                horizontal_crescente:   proximo_estado = salva_posicao; 
                horizontal_decrescente: proximo_estado = salva_posicao;
                vertical_crescente:     proximo_estado = salva_posicao;
                vertical_decrescente:   proximo_estado = salva_posicao;
                salva_posicao:          proximo_estado = rco_contador_tiro ? sinaliza : incrementa_contador;
                incrementa_contador:    proximo_estado = aux;
                aux:                    proximo_estado = verifica_loaded;
                sinaliza:               proximo_estado = espera;
                default:                proximo_estado = inicio;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        reset_contador_tiro         = (estado_atual == reseta_contador) ? 1&apos;b1 : 1&apos;b0;
        new_loaded                  = (estado_atual == altera_loaded || 
                                       estado_atual == salva_loaded) ? 1&apos;b0 : 1&apos;b1;
        enable_load_tiro             = (estado_atual == salva_loaded) ? 1&apos;b1 : 1&apos;b0;
        enable_mem_tiro             = (estado_atual == horizontal_crescente || 
                                        estado_atual == horizontal_decrescente ||
                                        estado_atual == vertical_crescente ||
                                        estado_atual == vertical_decrescente) ? 1&apos;b1 : 1&apos;b0;
        conta_contador_tiro         = (estado_atual == incrementa_contador) ? 1&apos;b1 : 1&apos;b0;
        select_soma_sub             = (estado_atual == horizontal_decrescente ||
                                       estado_atual == vertical_decrescente      )? 1&apos;b1 : 1&apos;b0;

        select_mux_pos_tiro         = (estado_atual == horizontal_crescente ||
                                       estado_atual == horizontal_decrescente) ? 2&apos;b01 :  
                                      (estado_atual == vertical_crescente ||
                                       estado_atual == vertical_decrescente) ? 2&apos;b10 : 2&apos;b00;

        select_mux_coor_tiro        = (estado_atual == vertical_crescente ||
                                       estado_atual == vertical_decrescente) ? 1&apos;b1 : 1&apos;b0;
        movimentacao_concluida_tiro = (estado_atual == sinaliza) ? 1&apos;b1 : 1&apos;b0;

        // Saída de depuração (estado)
        case (estado_atual)
                inicio:                 db_estado_move_tiros = 5&apos;b00000; // 0
                espera:                 db_estado_move_tiros = 5&apos;b00001; // 1
                reseta_contador:        db_estado_move_tiros = 5&apos;b00010; // 2
                verifica_loaded:        db_estado_move_tiros = 5&apos;b00011; // 3
                verifica_saiu_tela:     db_estado_move_tiros = 5&apos;b00100; // 4
                altera_loaded:          db_estado_move_tiros = 5&apos;b00101; // 5
                salva_loaded:           db_estado_move_tiros = 5&apos;b00110; // 6
                incrementa_contador:    db_estado_move_tiros = 5&apos;b00111; // 7
                verifica_opcode:        db_estado_move_tiros = 5&apos;b01000; // 8 
                horizontal_crescente:   db_estado_move_tiros = 5&apos;b01001; // 9 
                horizontal_decrescente: db_estado_move_tiros = 5&apos;b01010; // A
                vertical_crescente:     db_estado_move_tiros = 5&apos;b01011; // B
                vertical_decrescente:   db_estado_move_tiros = 5&apos;b01100; // C
                salva_posicao:          db_estado_move_tiros = 5&apos;b01101; // D
                sinaliza:               db_estado_move_tiros = 5&apos;b01110; // E
                aux:                    db_estado_move_tiros = 5&apos;b01111; // F
                erro:                   db_estado_move_tiros = 5&apos;b11111; // erro
                default:                db_estado_move_tiros = 5&apos;b11111; // 
        endcase
    end
endmodule



module uc_registra_tiro (
        input clock                    ,
        input registra_tiro            , // entrada que inicia a máquina de estados
        input reset                    ,
        input loaded_tiro              ,
        input rco_contador_tiro        ,
        output reg enable_mem_tiro     , // enable da memoria de tiros
        output reg enable_load_tiro    , // enable da memoria de tiros
        output reg new_load            ,
        //contador
        output reg clear_contador_tiro  , // clear do contador que aponta para a posição do tiro na memoria
        output reg conta_contador_tiro  , // conta do contador que aponta para a posição do tiro na memoria
        output reg [1:0] select_mux_pos , // mux que seleciona a posição que será salva na memoria (salva a posição da nave e o opcode)
        output reg tiro_registrado      , // saida final que indica o fim da operação registra tiro
        output reg [3:0] db_estado_registra_tiro

);

        /* declaração dos estados dessa UC */
        parameter inicial                  = 4&apos;b0000; // 0
        parameter espera                   = 4&apos;b0001; // 1
        parameter zera_contador            = 4&apos;b0010; // 2
        parameter verifica                 = 4&apos;b0011; // 3
        parameter incrementa_contador_tiro = 4&apos;b0100; // 4
        parameter salva_tiro               = 4&apos;b0101; // 5
        parameter sinaliza                 = 4&apos;b0110; // 6
        parameter aux                      = 4&apos;b0111; // 7
        parameter erro                     = 4&apos;b1111; // F


        // Variáveis de estado
        reg [3:0] estado_atual, proximo_estado;


        // Memória de estado
        always @(posedge clock or posedge reset) begin
                if (reset)
                        estado_atual &lt;= inicial;
                else
                        estado_atual &lt;= proximo_estado;
        end

        // mudança de estados
        always @* begin
        case (estado_atual)
                inicial:                  proximo_estado = espera;
                espera:                   proximo_estado = registra_tiro ? zera_contador : espera;
                
                zera_contador:            proximo_estado = verifica;

                verifica:                 proximo_estado = (loaded_tiro &amp;&amp; ~rco_contador_tiro) ? incrementa_contador_tiro : 
                                                           (loaded_tiro &amp;&amp; rco_contador_tiro)  ? sinaliza   : salva_tiro;
                incrementa_contador_tiro: proximo_estado = aux;
                aux:                      proximo_estado = verifica;
                salva_tiro:               proximo_estado = sinaliza;
                sinaliza:                 proximo_estado = espera;
                default:                  proximo_estado = inicial;
        endcase
    end

    // Lógica de saída (maquina Moore)
    always @* begin
        clear_contador_tiro = (estado_atual == zera_contador) ? 1&apos;b1 : 1&apos;b0;
        new_load            = (estado_atual == salva_tiro)    ? 1&apos;b1 : 1&apos;b0;
        enable_mem_tiro     = (estado_atual == salva_tiro)    ? 1&apos;b1 : 1&apos;b0;
        enable_load_tiro    = (estado_atual == salva_tiro)    ? 1&apos;b1 : 1&apos;b0;
        tiro_registrado     = (estado_atual == sinaliza)      ? 1&apos;b1 : 1&apos;b0;
        select_mux_pos      = (estado_atual == salva_tiro)    ? 2&apos;b00 : 2&apos;b00;   
        conta_contador_tiro = (estado_atual == incrementa_contador_tiro) ? 1&apos;b1 : 1&apos;b0;

        // Saída de depuração (estado)
        case (estado_atual)
            inicial:                  db_estado_registra_tiro = 4&apos;b0000; // 0
            espera:                   db_estado_registra_tiro = 4&apos;b0001; // 1
            zera_contador:            db_estado_registra_tiro = 4&apos;b0010; // 2
            verifica:                 db_estado_registra_tiro = 4&apos;b0011; // 3
            incrementa_contador_tiro: db_estado_registra_tiro = 4&apos;b0100; // 4
            salva_tiro:               db_estado_registra_tiro = 4&apos;b0101; // 5
            sinaliza:                 db_estado_registra_tiro = 4&apos;b0110; // 6                    
            aux:                      db_estado_registra_tiro = 4&apos;b0111; // 7
            erro:                     db_estado_registra_tiro = 4&apos;b1111; // F
            default:                  db_estado_registra_tiro = 4&apos;b0000;
        endcase
    end








endmodule

module comparador_85 #(parameter N = 4)(
                input [N-1:0] A, 
                input [N-1:0] B,
                input       ALBi, 
                input       AGBi, 
                input       AEBi,  
                output      ALBo, 
                output      AGBo, 
                output      AEBo
                );

    wire[N:0]  CSL, CSG;

    assign CSL  = ~A + B + ALBi;
    assign ALBo = ~CSL[N];
    assign CSG  = A + ~B + AGBi;
    assign AGBo = ~CSG[N];
    assign AEBo = ((A == B) &amp;&amp; AEBi);

endmodule 
module contador_163 #(parameter N = 16, parameter tempo = 2000) ( 
                        input clock, 
                        input clr, 
                        input ld, 
                        input ent, 
                        input enp, 
                        input [N-1:0] D, 
                        output reg [N-1:0] Q, 
                        output reg rco
                    );

    initial begin
        Q = 0;
    end
        
    always @ (posedge clock)
        if (clr)               Q &lt;= 0;
        else if (ld)           Q &lt;= D;
        else if (ent &amp;&amp; enp)   Q &lt;= Q + 1;
        else                   Q &lt;= Q;

    always @ (Q or ent)
        if (ent &amp;&amp; (Q == tempo))   rco = 1;
        else                       rco = 0;
endmodule
module contador_m #(parameter M=16, N=4)
  (
   input  wire          clock,
   input  wire          zera_as,
   input  wire          zera_s,
   input  wire          conta,
   output reg  [N-1:0]  Q,
   output reg           fim,
   output reg           meio
  );

  always @(posedge clock or posedge zera_as) begin
    if (zera_as) begin
      Q &lt;= 0;
    end else if (clock) begin
      if (zera_s) begin
        Q &lt;= 0;
      end else if (conta) begin
        if (Q == M-1) begin
          Q &lt;= 0;
        end else begin
          Q &lt;= Q + 1;
        end
      end
    end
  end

  // Saidas
  always @ (Q)
      if (Q == M-1)   fim = 1;
      else            fim = 0;

  always @ (Q)
      if (Q == M/2-1) meio = 1;
      else            meio = 0;

endmodule

// modulo que decrementa em 1 a cada boda de subida caso ent, enp sejam HIGH

module decrementador #(parameter N=4) ( 
                      input clock       , 
                      input clr         , 
                      input ld          , 
                      input ent         , 
                      input enp         , 
                      input [N-1:0] D     , 
                      output reg [N-1:0] Q , 
                      output reg rco
                    );

	 initial begin
		Q = 3;
    end
    

    always @ (posedge clock)
        if (clr)                           Q &lt;= 3;
        else if (ld)                       Q &lt;= D;
        else if (ent &amp;&amp; enp &amp;&amp;  Q != 0)    Q &lt;= Q - 1;
        else                               Q &lt;= Q;
 
    always @ (Q or ent)
        if (ent &amp;&amp; (Q == 0))       rco = 1;
        else                       rco = 0;

endmodule

 module edge_detector (
    input  clock,
    input  reset,
    input  sinal,
    output pulso
);

    reg reg0;
    reg reg1;

    always @(posedge clock or posedge reset) begin
        if (reset) begin
            reg0 &lt;= 1&apos;b0;
            reg1 &lt;= 1&apos;b0;
        end else if (clock) begin
            reg0 &lt;= sinal;
            reg1 &lt;= reg0;
        end
    end

    assign pulso = ~reg1 &amp; reg0;

endmodule

module memoria_aster(
    input        clk,
    input        we,
    input  [9:0] data,
    input  [3:0] addr,
    output [9:0] q
);

    // Variavel RAM (armazena dados)
    reg [9:0] ram[15:0];

    // Registra endereco de acesso
    reg [3:0] addr_reg;

    // Especifica conteudo inicial da RAM
    // a partir da leitura de arquivo usando $readmemb
    initial begin
        ram[4&apos;b0]  =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d1]  =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d2]  =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d3]  =  10&apos;b0000_0111_00; // (0,7)
        ram[4&apos;d4]  =  10&apos;b0111_0000_00; // (7,0)
        ram[4&apos;d5]  =  10&apos;b1110_0111_01; // (14,7)
        ram[4&apos;d6]  =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d7]  =  10&apos;b1110_0111_01; // (14,7)
        ram[4&apos;d8]  =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d9]  =  10&apos;b0111_0111_00; // (7,7)
        ram[4&apos;d10] =  10&apos;b0111_0000_10; // (7,0)
        ram[4&apos;d11] =  10&apos;b0111_0000_10; // (7,0)
        ram[4&apos;d12] =  10&apos;b0000_0111_00; // (0,7)
        ram[4&apos;d13] =  10&apos;b0000_0111_00; // (0,7)
        ram[4&apos;d14] =  10&apos;b0111_1110_11; // (7,14)
        ram[4&apos;d15] =  10&apos;b0111_1110_11; // (7,14)
    end 

    always @ (posedge clk)
    begin
        // Escrita da memoria
        if (we)
            ram[addr] &lt;= data;

        addr_reg &lt;= addr;
    end

    // Atribuicao continua retorna dado
    assign q = ram[addr_reg];

endmodule
module memoria_load_aste(
    input        clk,
    input        we,
    input  [1:0] data,
    input  [3:0] addr,
    output [1:0] q
);

    // Variavel RAM (armazena dados)
    reg [1:0] ram[15:0];

    // Registra endereco de acesso
    reg [3:0] addr_reg;

    // Especifica conteudo inicial da RAM
    // a partir da leitura de arquivo usando $readmemb
    initial 
    begin : INICIA_RAM
        ram[4&apos;b0] =  2&apos;b10;
        ram[4&apos;d1] =  2&apos;b00;
        ram[4&apos;d2] =  2&apos;b00;
        ram[4&apos;d3] =  2&apos;b00;
        ram[4&apos;d4] =  2&apos;b00; 
        ram[4&apos;d5] =  2&apos;b00;
        ram[4&apos;d6] =  2&apos;b00;
        ram[4&apos;d7] =  2&apos;b00;
        ram[4&apos;d8] =  2&apos;b00;
        ram[4&apos;d9] =  2&apos;b00;
        ram[4&apos;d10] = 2&apos;b00;
        ram[4&apos;d11] = 2&apos;b00;
        ram[4&apos;d12] = 2&apos;b00;
        ram[4&apos;d13] = 2&apos;b00;
        ram[4&apos;d14] = 2&apos;b00;
        ram[4&apos;d15] = 2&apos;b00;
    end 

    always @ (posedge clk)
    begin
        // Escrita da memoria
        if (we)
            ram[addr] &lt;= data;

        addr_reg &lt;= addr;
    end

    // Atribuicao continua retorna dado
    assign q = ram[addr_reg];

endmodule
module memoria_tiro(
    input        clk,
    input        we,
    input  [9:0] data,
    input  [3:0] addr,
    output [9:0] q
);

    // Variavel RAM (armazena dados)
    reg [9:0] ram[15:0];

    // Registra endereco de acesso
    reg [3:0] addr_reg;

    // Especifica conteudo inicial da RAM
    // a partir da leitura de arquivo usando $readmemb
    initial begin
        ram[4&apos;b0] =  10&apos;b0000_0000_00;
        ram[4&apos;d1] =  10&apos;b0000_0000_00;
        ram[4&apos;d2] =  10&apos;b0000_0000_00;
        ram[4&apos;d3] =  10&apos;b0000_0000_00;
        ram[4&apos;d4] =  10&apos;b0000_0000_00;
        ram[4&apos;d5] =  10&apos;b0000_0000_00;
        ram[4&apos;d6] =  10&apos;b0000_0000_00;
        ram[4&apos;d7] =  10&apos;b0000_0000_00;
        ram[4&apos;d8] =  10&apos;b0000_0000_00;
        ram[4&apos;d9] =  10&apos;b0000_0000_00;
        ram[4&apos;d10] = 10&apos;b0000_0000_00;
        ram[4&apos;d11] = 10&apos;b0000_0000_00;
        ram[4&apos;d12] = 10&apos;b0000_0000_00;
        ram[4&apos;d13] = 10&apos;b0000_0000_00;
        ram[4&apos;d14] = 10&apos;b0000_0000_00;
        ram[4&apos;d15] = 10&apos;b0000_0000_00;
    end 

    always @ (posedge clk)
    begin
        // Escrita da memoria
        if (we)
            ram[addr] &lt;= data;

        addr_reg &lt;= addr;
    end

    // Atribuicao continua retorna dado
    assign q = ram[addr_reg];

endmodule
module memoria_load_tiro(
    input        clk,
    input        we,
    input  [1:0] data,
    input  [3:0] addr,
    output [1:0] q
);

    // Variavel RAM (armazena dados)
    reg [1:0] ram[15:0];

    // Registra endereco de acesso
    reg [3:0] addr_reg;

    // Especifica conteudo inicial da RAM
    // a partir da leitura de arquivo usando $readmemb
    initial 
    begin : INICIA_RAM
        ram[4&apos;b0] =  2&apos;b00;
        ram[4&apos;d1] =  2&apos;b00;
        ram[4&apos;d2] =  2&apos;b00;
        ram[4&apos;d3] =  2&apos;b00;
        ram[4&apos;d4] =  2&apos;b00; 
        ram[4&apos;d5] =  2&apos;b00;
        ram[4&apos;d6] =  2&apos;b00;
        ram[4&apos;d7] =  2&apos;b00;
        ram[4&apos;d8] =  2&apos;b00;
        ram[4&apos;d9] =  2&apos;b00;
        ram[4&apos;d10] = 2&apos;b00;
        ram[4&apos;d11] = 2&apos;b00;
        ram[4&apos;d12] = 2&apos;b00;
        ram[4&apos;d13] = 2&apos;b00;
        ram[4&apos;d14] = 2&apos;b00;
        ram[4&apos;d15] = 2&apos;b00;
    end 

    always @ (posedge clk)
    begin
        // Escrita da memoria
        if (we)
            ram[addr] &lt;= data;

        addr_reg &lt;= addr;
    end

    // Atribuicao continua retorna dado
    assign q = ram[addr_reg];

endmodule
module mux_coor #(parameter N = 4)(
        input select_mux_coor,
        input [N-1:0] mem_coor_x,
        input [N-1:0] mem_coor_y,
        output [N-1:0] saida_mux
        );

        parameter select_mem_coor_x = 1&apos;b0;

        assign saida_mux = select_mux_coor == select_mem_coor_x ? mem_coor_x : mem_coor_y;
endmodule





module mux_pos #(parameter N = 4)(
        input [1:0] select_mux_pos,
        input [N-1:0] resul_soma,
        input [N-1:0] mem_coor_x,
        input [N-1:0] mem_coor_y,
        input [1:0]   mem_opcode,
        input [N-1:0] random_x,
        input [N-1:0] random_y,
        input [1:0] random_opcode,
        output [9:0] saida_mux
        );

        parameter posicao_op_random = 2&apos;b00;
        parameter resul_soma_coor_x = 2&apos;b01;
        parameter resul_soma_coor_y = 2&apos;b10;

        // 00 - seleciona a posição e opcode randomicos
        // 01 - seleciona o resultado da soma na coordenada X e opcode da memoria (Y da memoria)
        // 10 - seleciona o resultado da soma na coordenada Y e opcode da memoria (X da memoria)

        assign saida_mux = select_mux_pos == posicao_op_random ? {random_x, random_y, random_opcode}  :
                           select_mux_pos == resul_soma_coor_x ? {resul_soma, mem_coor_y, mem_opcode} :
                           select_mux_pos == resul_soma_coor_y ? {mem_coor_x, resul_soma, mem_opcode} : {mem_coor_x, mem_coor_y, mem_opcode};
endmodule
module mux_reg_jogada (
        input [3:0] select_mux_jogada,
        output [1:0] saida_mux
        );

        assign saida_mux = select_mux_jogada == 4&apos;b0001 ? 2&apos;b00 : 
                           select_mux_jogada == 4&apos;b1000 ? 2&apos;b10 :
                           select_mux_jogada == 4&apos;b0010 ? 2&apos;b01 : 
                           select_mux_jogada == 4&apos;b0100 ? 2&apos;b11 : 2&apos;b11 ;
endmodule





//registrador_n #(N = 5)(

// )
module registrador_n #(parameter N = 4)(
    input        clock ,
    input        clear ,
    input        enable,
    input  [N-1:0] D     ,
    output [N-1:0] Q
);

    reg [N-1:0] IQ;

    always @(posedge clock or posedge clear) begin
        if (clear)
            IQ &lt;= 0;
        else if (enable)
            IQ &lt;= D;
    end

    assign Q = IQ;

endmodule
// modulo que implementa o somador/subtrator, caso select seja um então ocorre a soma
// caso seja 0 então ocorre a subtração

module somador_subtrator #(parameter N=4) ( 
                          input [N-1:0] a,
                          input [N-1:0] b,
                          input select,
                          output [N:0] resul
                    );

  reg [N:0] res;

  always@(*) begin
    if(~select) res = a + b;
    else res = a-b;
  end

  assign resul = res;


  // assign resul = select ? a + b : a - b;

endmodule</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pronto,db_estado_jogo_principal:5,db_estado_coordena_asteroides_tiros:5,db_estado_compara_tiros_e_asteroide:5,db_estado_move_tiros:5,db_estado_compara_asteroides_com_nave_e_tiros:5,db_estado_move_asteroides:5,db_estado_registra_tiro:4,db_vidas:4,db_asteroide_x:4,db_asteroide_y:4,db_tiro_x:4,db_tiro_y:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>25</int>
        </entry>
      </elementAttributes>
      <pos x="540" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>2</string>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>100 Hz</string>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>100</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="400" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Switch</elementName>
      <elementAttributes/>
      <pos x="400" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Switch</elementName>
      <elementAttributes/>
      <pos x="400" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Switch</elementName>
      <elementAttributes/>
      <pos x="400" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="400" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Reset</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Iniciar</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="440" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="400" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="360" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="320" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>splitterSpreading</string>
          <int>2</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>1,1,1,1,1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>6</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="400" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="1060" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Pronto</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="1040" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Jogo Principal</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Coordena</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Compara Tiros e Asteroides</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Move Tiros</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Compara Asteroides, Nave e Tiros</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Move Asteroides</string>
        </entry>
      </elementAttributes>
      <pos x="1280" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Registra Tiros</string>
        </entry>
      </elementAttributes>
      <pos x="1300" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="1240" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="1120" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>100000</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>100KHz</string>
        </entry>
      </elementAttributes>
      <pos x="280" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Switch</elementName>
      <elementAttributes/>
      <pos x="400" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>tiro</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="508" y="581"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>especial</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="467" y="633"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>up</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="306" y="568"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>down</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="349" y="594"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>right</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="388" y="587"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>left</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>snapToGrid</string>
          <boolean>false</boolean>
        </entry>
      </elementAttributes>
      <pos x="430" y="572"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1400" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1460" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1500" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1560" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1180" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1240" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1280" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1340" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Tiros</string>
        </entry>
      </elementAttributes>
      <pos x="1180" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Asteroide</string>
        </entry>
      </elementAttributes>
      <pos x="1440" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="480" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="520" y="500"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="1200" y="480"/>
      <p2 x="1240" y="480"/>
    </wire>
    <wire>
      <p1 x="1040" y="480"/>
      <p2 x="1160" y="480"/>
    </wire>
    <wire>
      <p1 x="440" y="260"/>
      <p2 x="480" y="260"/>
    </wire>
    <wire>
      <p1 x="1040" y="420"/>
      <p2 x="1240" y="420"/>
    </wire>
    <wire>
      <p1 x="440" y="360"/>
      <p2 x="540" y="360"/>
    </wire>
    <wire>
      <p1 x="1040" y="360"/>
      <p2 x="1160" y="360"/>
    </wire>
    <wire>
      <p1 x="1200" y="360"/>
      <p2 x="1240" y="360"/>
    </wire>
    <wire>
      <p1 x="1040" y="520"/>
      <p2 x="1100" y="520"/>
    </wire>
    <wire>
      <p1 x="1100" y="840"/>
      <p2 x="1440" y="840"/>
    </wire>
    <wire>
      <p1 x="440" y="300"/>
      <p2 x="480" y="300"/>
    </wire>
    <wire>
      <p1 x="1180" y="300"/>
      <p2 x="1240" y="300"/>
    </wire>
    <wire>
      <p1 x="1040" y="460"/>
      <p2 x="1180" y="460"/>
    </wire>
    <wire>
      <p1 x="400" y="400"/>
      <p2 x="440" y="400"/>
    </wire>
    <wire>
      <p1 x="520" y="400"/>
      <p2 x="540" y="400"/>
    </wire>
    <wire>
      <p1 x="1040" y="400"/>
      <p2 x="1200" y="400"/>
    </wire>
    <wire>
      <p1 x="1160" y="240"/>
      <p2 x="1240" y="240"/>
    </wire>
    <wire>
      <p1 x="1040" y="560"/>
      <p2 x="1060" y="560"/>
    </wire>
    <wire>
      <p1 x="1040" y="880"/>
      <p2 x="1320" y="880"/>
    </wire>
    <wire>
      <p1 x="440" y="340"/>
      <p2 x="480" y="340"/>
    </wire>
    <wire>
      <p1 x="1040" y="340"/>
      <p2 x="1060" y="340"/>
    </wire>
    <wire>
      <p1 x="480" y="340"/>
      <p2 x="540" y="340"/>
    </wire>
    <wire>
      <p1 x="1040" y="500"/>
      <p2 x="1120" y="500"/>
    </wire>
    <wire>
      <p1 x="1060" y="820"/>
      <p2 x="1220" y="820"/>
    </wire>
    <wire>
      <p1 x="400" y="440"/>
      <p2 x="460" y="440"/>
    </wire>
    <wire>
      <p1 x="1040" y="440"/>
      <p2 x="1200" y="440"/>
    </wire>
    <wire>
      <p1 x="1160" y="600"/>
      <p2 x="1240" y="600"/>
    </wire>
    <wire>
      <p1 x="460" y="380"/>
      <p2 x="540" y="380"/>
    </wire>
    <wire>
      <p1 x="1040" y="380"/>
      <p2 x="1180" y="380"/>
    </wire>
    <wire>
      <p1 x="1180" y="540"/>
      <p2 x="1240" y="540"/>
    </wire>
    <wire>
      <p1 x="1040" y="540"/>
      <p2 x="1080" y="540"/>
    </wire>
    <wire>
      <p1 x="440" y="220"/>
      <p2 x="480" y="220"/>
    </wire>
    <wire>
      <p1 x="1080" y="860"/>
      <p2 x="1540" y="860"/>
    </wire>
    <wire>
      <p1 x="480" y="480"/>
      <p2 x="480" y="500"/>
    </wire>
    <wire>
      <p1 x="480" y="220"/>
      <p2 x="480" y="260"/>
    </wire>
    <wire>
      <p1 x="480" y="260"/>
      <p2 x="480" y="300"/>
    </wire>
    <wire>
      <p1 x="480" y="300"/>
      <p2 x="480" y="340"/>
    </wire>
    <wire>
      <p1 x="320" y="480"/>
      <p2 x="320" y="500"/>
    </wire>
    <wire>
      <p1 x="1120" y="500"/>
      <p2 x="1120" y="560"/>
    </wire>
    <wire>
      <p1 x="1440" y="800"/>
      <p2 x="1440" y="840"/>
    </wire>
    <wire>
      <p1 x="1060" y="300"/>
      <p2 x="1060" y="340"/>
    </wire>
    <wire>
      <p1 x="1060" y="560"/>
      <p2 x="1060" y="820"/>
    </wire>
    <wire>
      <p1 x="1540" y="800"/>
      <p2 x="1540" y="860"/>
    </wire>
    <wire>
      <p1 x="1220" y="800"/>
      <p2 x="1220" y="820"/>
    </wire>
    <wire>
      <p1 x="520" y="480"/>
      <p2 x="520" y="500"/>
    </wire>
    <wire>
      <p1 x="520" y="400"/>
      <p2 x="520" y="460"/>
    </wire>
    <wire>
      <p1 x="360" y="480"/>
      <p2 x="360" y="500"/>
    </wire>
    <wire>
      <p1 x="1160" y="240"/>
      <p2 x="1160" y="360"/>
    </wire>
    <wire>
      <p1 x="1160" y="480"/>
      <p2 x="1160" y="600"/>
    </wire>
    <wire>
      <p1 x="1320" y="800"/>
      <p2 x="1320" y="880"/>
    </wire>
    <wire>
      <p1 x="460" y="380"/>
      <p2 x="460" y="440"/>
    </wire>
    <wire>
      <p1 x="1100" y="520"/>
      <p2 x="1100" y="840"/>
    </wire>
    <wire>
      <p1 x="400" y="480"/>
      <p2 x="400" y="500"/>
    </wire>
    <wire>
      <p1 x="1200" y="360"/>
      <p2 x="1200" y="400"/>
    </wire>
    <wire>
      <p1 x="1200" y="440"/>
      <p2 x="1200" y="480"/>
    </wire>
    <wire>
      <p1 x="1040" y="580"/>
      <p2 x="1040" y="880"/>
    </wire>
    <wire>
      <p1 x="1460" y="800"/>
      <p2 x="1460" y="820"/>
    </wire>
    <wire>
      <p1 x="1240" y="800"/>
      <p2 x="1240" y="820"/>
    </wire>
    <wire>
      <p1 x="1560" y="800"/>
      <p2 x="1560" y="820"/>
    </wire>
    <wire>
      <p1 x="440" y="360"/>
      <p2 x="440" y="400"/>
    </wire>
    <wire>
      <p1 x="440" y="480"/>
      <p2 x="440" y="500"/>
    </wire>
    <wire>
      <p1 x="1080" y="540"/>
      <p2 x="1080" y="860"/>
    </wire>
    <wire>
      <p1 x="1340" y="800"/>
      <p2 x="1340" y="820"/>
    </wire>
    <wire>
      <p1 x="1180" y="300"/>
      <p2 x="1180" y="380"/>
    </wire>
    <wire>
      <p1 x="1180" y="460"/>
      <p2 x="1180" y="540"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>